/**
* Jenkins pipeline to build an application with the GitHub flow in mind (https://guides.github.com/introduction/flow/).
*
* This pipeline requires the following credentials:
* ---
* Type          | ID                | Description
* Secret text   | devops-project    | The OpenShift project Id of the DevOps project that this Jenkins instance is running in
* Secret text   | dev-project       | The OpenShift project Id of the project's development environment
* Secret text   | sit-project       | The OpenShift project Id of the project's integration testing environment
* Secret text   | uat-project       | The OpenShift project Id of the project's user acceptance environment
*
*/

// TODO extract common stuff into shared libraries: https://jenkins.io/doc/book/pipeline/shared-libraries/

node('maven') {
  def teamDevOpsProject
  def projectDevProject
  def projectSitProject
  def projectUatProject

  withCredentials([
      string(credentialsId: 'devops-project', variable: 'DEVOPS_PROJECT_ID'),
      string(credentialsId: 'dev-project', variable: 'DEV_PROJECT_ID'),
      string(credentialsId: 'sit-project', variable: 'SIT_PROJECT_ID'),
      string(credentialsId: 'uat-project', variable: 'UAT_PROJECT_ID'),
    ]) {
    teamDevOpsProject = "${env.DEVOPS_PROJECT_ID}"
    projectDevProject = "${env.DEV_PROJECT_ID}"
    projectSitProject = "${env.SIT_PROJECT_ID}"
    projectUatProject = "${env.UAT_PROJECT_ID}"
  }

  def project = "${env.JOB_NAME.split('/')[0]}"
  def app = "${env.JOB_NAME.split('/')[1]}"
  def appBuildConfig = "${project}-${app}"
  def tag

  stage ('Checks and Tests') {
    final scmVars = checkout(scm)
    def shortGitCommit = scmVars.GIT_COMMIT[0..6]
    def pom = readMavenPom file: 'pom.xml'
    
    tag = "${pom.version}-${shortGitCommit}"
    echo "Building application ${app}:${tag} from commit ${scmVars} with BuildConfig ${appBuildConfig}"
    
    try {
      sh ': Maven build && ./mvnw --batch-mode test || mvn --batch-mode test -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.test.redirectTestOutputToFile=true'
    } finally {
      junit 'target/surefire-reports/*.xml'
    }
    // TODO split unit and integration tests
  }

  if (env.BRANCH_NAME == 'master' || !env.BRANCH_NAME) {
    stage('OpenShift Build') {
      openshift.withProject(teamDevOpsProject) {
        def bc = openshift.selector("bc/${appBuildConfig}")
        
        def buildConfig = bc.object()
        echo "Current tag: ${buildConfig.spec.output.to.name}"
        if (buildConfig.spec.output.to.name != "${appBuildConfig}:${tag}") {
            bc.patch("\'{ \"spec\": { \"output\": { \"to\": { \"name\": \"${appBuildConfig}:${tag}\" } } } }\'")
            def build = bc.startBuild();
            timeout(5) {
                build.untilEach(1) {
                    return it.object().status.phase == "Complete"
                }
            }
        }
      }
    }

    stage('Deploy to DEV') {
      sh ': Deploying to DEV...'
      openshift.withProject(teamDevOpsProject) {
        openshift.tag("${teamDevOpsProject}/${appBuildConfig}:${tag}", "${projectDevProject}/${app}:${tag}")
      }
      openshift.withProject(projectDevProject) {
      	openshift.selector('dc', app).patch("\'{ \"spec\": { \"triggers\": [{ \"type\": \"ImageChange\", \"imageChangeParams\": { \"automatic\": false, \"containerNames\": [\"${app}\"], \"from\": { \"kind\": \"ImageStreamTag\", \"name\": \"${app}:${tag}\" } } }] } }\'")
        timeout(5) {
          openshift.selector('dc', app).rollout().latest()
          def deploymentObject = openshift.selector('dc', app).object()
          if (deploymentObject.spec.replicas > 0) {
            def podSelector = openshift.selector('pod', [deployment: "${app}-${deploymentObject.status.latestVersion}"])
            podSelector.untilEach {
              echo "Deployment [${deploymentObject.status.latestVersion}] with Pod [${it.object().metadata.name}] is ready?: ${it.object().status.containerStatuses[0].ready}"
              return it.object().status.containerStatuses[0].ready
            }
          } else {
              echo "Deployment has a replica count of 0. Not waiting for Pods to become healthy..."
          }
        }
      }
    }
    
    stage('Deploy to SIT') {
      sh ': Deploying to SIT...'
      openshift.withProject(projectDevProject) {
        openshift.tag("${projectDevProject}/${app}:${tag}", "${projectSitProject}/${app}:${tag}")
      }
      openshift.withProject(projectSitProject) {
        openshift.selector('dc', app).patch("\'{ \"spec\": { \"triggers\": [{ \"type\": \"ImageChange\", \"imageChangeParams\": { \"automatic\": false, \"containerNames\": [\"${app}\"], \"from\": { \"kind\": \"ImageStreamTag\", \"name\": \"${app}:${tag}\" } } }] } }\'")
        timeout(5) {
          openshift.selector('dc', app).rollout().latest()
          def deploymentObject = openshift.selector('dc', app).object()
          if (deploymentObject.spec.replicas > 0) {
            def podSelector = openshift.selector('pod', [deployment: "${app}-${deploymentObject.status.latestVersion}"])
            podSelector.untilEach {
              echo "Deployment [${deploymentObject.status.latestVersion}] with Pod [${it.object().metadata.name}] is ready?: ${it.object().status.containerStatuses[0].ready}"
              return it.object().status.containerStatuses[0].ready
            }
          } else {
              echo "Deployment has a replica count of 0. Not waiting for Pods to become healthy..."
          }
        }
      }
    }
    
    stage('Deploy to UAT') {
      sh ': Deploying to UAT...'
      input "Confirm deployment to UAT"
      openshift.withProject(projectSitProject) {
        openshift.tag("${projectSitProject}/${app}:${tag}", "${projectUatProject}/${app}:${tag}")
      }
      openshift.withProject(projectUatProject) {
      	openshift.selector('dc', app).patch("\'{ \"spec\": { \"triggers\": [{ \"type\": \"ImageChange\", \"imageChangeParams\": { \"automatic\": false, \"containerNames\": [\"${app}\"], \"from\": { \"kind\": \"ImageStreamTag\", \"name\": \"${app}:${tag}\" } } }] } }\'")
        timeout(5) {
          openshift.selector('dc', app).rollout().latest()
          def deploymentObject = openshift.selector('dc', app).object()
          if (deploymentObject.spec.replicas > 0) {
            def podSelector = openshift.selector('pod', [deployment: "${app}-${deploymentObject.status.latestVersion}"])
            podSelector.untilEach {
              echo "Deployment [${deploymentObject.status.latestVersion}] with Pod [${it.object().metadata.name}] is ready?: ${it.object().status.containerStatuses[0].ready}"
              return it.object().status.containerStatuses[0].ready
            }
          } else {
              echo "Deployment has a replica count of 0. Not waiting for Pods to become healthy..."
          }
        }
      }
    }
  }
}